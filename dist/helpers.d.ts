/**
 * Known services enum
 */
export declare enum bluetoothServices {
    'alert_notification' = 6161,
    'automation_io' = 6165,
    'battery_service' = 6159,
    'blood_pressure' = 6160,
    'body_composition' = 6171,
    'bond_management' = 6174,
    'continuous_glucose_monitoring' = 6175,
    'current_time' = 6149,
    'cycling_power' = 6168,
    'cycling_speed_and_cadence' = 6166,
    'device_information' = 6154,
    'environmental_sensing' = 6170,
    'generic_access' = 6144,
    'generic_attribute' = 6145,
    'glucose' = 6152,
    'health_thermometer' = 6153,
    'heart_rate' = 6157,
    'human_interface_device' = 6162,
    'immediate_alert' = 6146,
    'indoor_positioning' = 6177,
    'internet_protocol_support' = 6176,
    'link_loss' = 6147,
    'location_and_navigation' = 6169,
    'next_dst_change' = 6151,
    'phone_alert_status' = 6158,
    'pulse_oximeter' = 6178,
    'reference_time_update' = 6150,
    'running_speed_and_cadence' = 6164,
    'scan_parameters' = 6163,
    'tx_power' = 6148,
    'user_data' = 6172,
    'weight_scale' = 6173
}
/**
 * Known characteristics enum
 */
export declare enum bluetoothCharacteristics {
    'aerobic_heart_rate_lower_limit' = 10878,
    'aerobic_heart_rate_upper_limit' = 10884,
    'aerobic_threshold' = 10879,
    'age' = 10880,
    'aggregate' = 10842,
    'alert_category_id' = 10819,
    'alert_category_id_bit_mask' = 10818,
    'alert_level' = 10758,
    'alert_notification_control_point' = 10820,
    'alert_status' = 10815,
    'altitude' = 10931,
    'anaerobic_heart_rate_lower_limit' = 10881,
    'anaerobic_heart_rate_upper_limit' = 10882,
    'anaerobic_threshold' = 10883,
    'analog' = 10840,
    'apparent_wind_direction' = 10867,
    'apparent_wind_speed' = 10866,
    'gap.appearance' = 10753,
    'barometric_pressure_trend' = 10915,
    'battery_level' = 10777,
    'blood_pressure_feature' = 10825,
    'blood_pressure_measurement' = 10805,
    'body_composition_feature' = 10907,
    'body_composition_measurement' = 10908,
    'body_sensor_location' = 10808,
    'bond_management_control_point' = 10916,
    'bond_management_feature' = 10917,
    'boot_keyboard_input_report' = 10786,
    'boot_keyboard_output_report' = 10802,
    'boot_mouse_input_report' = 10803,
    'gap.central_address_resolution_support' = 10918,
    'cgm_feature' = 10920,
    'cgm_measurement' = 10919,
    'cgm_session_run_time' = 10923,
    'cgm_session_start_time' = 10922,
    'cgm_specific_ops_control_point' = 10924,
    'cgm_status' = 10921,
    'csc_feature' = 10844,
    'csc_measurement' = 10843,
    'current_time' = 10795,
    'cycling_power_control_point' = 10854,
    'cycling_power_feature' = 10853,
    'cycling_power_measurement' = 10851,
    'cycling_power_vector' = 10852,
    'database_change_increment' = 10905,
    'date_of_birth' = 10885,
    'date_of_threshold_assessment' = 10886,
    'date_time' = 10760,
    'day_date_time' = 10762,
    'day_of_week' = 10761,
    'descriptor_value_changed' = 10877,
    'gap.device_name' = 10752,
    'dew_point' = 10875,
    'digital' = 10838,
    'dst_offset' = 10765,
    'elevation' = 10860,
    'email_address' = 10887,
    'exact_time_256' = 10764,
    'fat_burn_heart_rate_lower_limit' = 10888,
    'fat_burn_heart_rate_upper_limit' = 10889,
    'firmware_revision_string' = 10790,
    'first_name' = 10890,
    'five_zone_heart_rate_limits' = 10891,
    'floor_number' = 10930,
    'gender' = 10892,
    'glucose_feature' = 10833,
    'glucose_measurement' = 10776,
    'glucose_measurement_context' = 10804,
    'gust_factor' = 10868,
    'hardware_revision_string' = 10791,
    'heart_rate_control_point' = 10809,
    'heart_rate_max' = 10893,
    'heart_rate_measurement' = 10807,
    'heat_index' = 10874,
    'height' = 10894,
    'hid_control_point' = 10828,
    'hid_information' = 10826,
    'hip_circumference' = 10895,
    'humidity' = 10863,
    'ieee_11073-20601_regulatory_certification_data_list' = 10794,
    'indoor_positioning_configuration' = 10925,
    'intermediate_blood_pressure' = 10806,
    'intermediate_temperature' = 10782,
    'irradiance' = 10871,
    'language' = 10914,
    'last_name' = 10896,
    'latitude' = 10926,
    'ln_control_point' = 10859,
    'ln_feature' = 10858,
    'local_east_coordinate.xml' = 10929,
    'local_north_coordinate' = 10928,
    'local_time_information' = 10767,
    'location_and_speed' = 10855,
    'location_name' = 10933,
    'longitude' = 10927,
    'magnetic_declination' = 10796,
    'magnetic_flux_density_2D' = 10912,
    'magnetic_flux_density_3D' = 10913,
    'manufacturer_name_string' = 10793,
    'maximum_recommended_heart_rate' = 10897,
    'measurement_interval' = 10785,
    'model_number_string' = 10788,
    'navigation' = 10856,
    'new_alert' = 10822,
    'gap.peripheral_preferred_connection_parameters' = 10756,
    'gap.peripheral_privacy_flag' = 10754,
    'plx_continuous_measurement' = 10847,
    'plx_features' = 10848,
    'plx_spot_check_measurement' = 10846,
    'pnp_id' = 10832,
    'pollen_concentration' = 10869,
    'position_quality' = 10857,
    'pressure' = 10861,
    'protocol_mode' = 10830,
    'rainfall' = 10872,
    'gap.reconnection_address' = 10755,
    'record_access_control_point' = 10834,
    'reference_time_information' = 10772,
    'report' = 10829,
    'report_map' = 10827,
    'resting_heart_rate' = 10898,
    'ringer_control_point' = 10816,
    'ringer_setting' = 10817,
    'rsc_feature' = 10836,
    'rsc_measurement' = 10835,
    'sc_control_point' = 10837,
    'scan_interval_window' = 10831,
    'scan_refresh' = 10801,
    'sensor_location' = 10845,
    'serial_number_string' = 10789,
    'gatt.service_changed' = 10757,
    'software_revision_string' = 10792,
    'sport_type_for_aerobic_and_anaerobic_thresholds' = 10899,
    'supported_new_alert_category' = 10823,
    'supported_unread_alert_category' = 10824,
    'system_id' = 10787,
    'temperature' = 10862,
    'temperature_measurement' = 10780,
    'temperature_type' = 10781,
    'three_zone_heart_rate_limits' = 10900,
    'time_accuracy' = 10770,
    'time_source' = 10771,
    'time_update_control_point' = 10774,
    'time_update_state' = 10775,
    'time_with_dst' = 10769,
    'time_zone' = 10766,
    'true_wind_direction' = 10865,
    'true_wind_speed' = 10864,
    'two_zone_heart_rate_limit' = 10901,
    'tx_power_level' = 10759,
    'uncertainty' = 10932,
    'unread_alert_status' = 10821,
    'user_control_point' = 10911,
    'user_index' = 10906,
    'uv_index' = 10870,
    'vo2_max' = 10902,
    'waist_circumference' = 10903,
    'weight' = 10904,
    'weight_measurement' = 10909,
    'weight_scale_feature' = 10910,
    'wind_chill' = 10873
}
/**
 * Known descriptors enum
 */
export declare enum bluetoothDescriptors {
    'gatt.characteristic_extended_properties' = 10496,
    'gatt.characteristic_user_description' = 10497,
    'gatt.client_characteristic_configuration' = 10498,
    'gatt.server_characteristic_configuration' = 10499,
    'gatt.characteristic_presentation_format' = 10500,
    'gatt.characteristic_aggregate_format' = 10501,
    'valid_range' = 10502,
    'external_report_reference' = 10503,
    'report_reference' = 10504,
    'number_of_digitals' = 10505,
    'value_trigger_setting' = 10506,
    'es_configuration' = 10507,
    'es_measurement' = 10508,
    'es_trigger_setting' = 10509,
    'time_trigger_setting' = 10510
}
/**
 * Gets a canonical UUID from a partial UUID in string or hex format
 * @param uuid The partial UUID
 * @returns canonical UUID
 */
export declare const getCanonicalUUID: (uuid: string | number) => string;
/**
 * Gets a canonical service UUID from a known service name or partial UUID in string or hex format
 * @param service The known service name
 * @returns canonical UUID
 */
export declare const getServiceUUID: (service: string | number) => string;
/**
 * Gets a canonical characteristic UUID from a known characteristic name or partial UUID in string or hex format
 * @param characteristic The known characteristic name
 * @returns canonical UUID
 */
export declare const getCharacteristicUUID: (characteristic: string | number) => string;
/**
 * Gets a canonical descriptor UUID from a known descriptor name or partial UUID in string or hex format
 * @param descriptor The known descriptor name
 * @returns canonical UUID
 */
export declare const getDescriptorUUID: (descriptor: string | number) => string;
